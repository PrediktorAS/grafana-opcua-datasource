// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: datasource.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Models {

  /// <summary>Holder for reflection information generated from datasource.proto</summary>
  public static partial class DatasourceReflection {

    #region Descriptor
    /// <summary>File descriptor for datasource.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatasourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBkYXRhc291cmNlLnByb3RvEgZtb2RlbHMihQEKEURhdGFzb3VyY2VSZXF1",
            "ZXN0EiQKCXRpbWVSYW5nZRgBIAEoCzIRLm1vZGVscy5UaW1lUmFuZ2USKgoK",
            "ZGF0YXNvdXJjZRgCIAEoCzIWLm1vZGVscy5EYXRhc291cmNlSW5mbxIeCgdx",
            "dWVyaWVzGAMgAygLMg0ubW9kZWxzLlF1ZXJ5IlQKBVF1ZXJ5Eg0KBXJlZklk",
            "GAEgASgJEhUKDW1heERhdGFQb2ludHMYAiABKAMSEgoKaW50ZXJ2YWxNcxgD",
            "IAEoAxIRCgltb2RlbEpzb24YBCABKAkiUwoJVGltZVJhbmdlEg8KB2Zyb21S",
            "YXcYASABKAkSDQoFdG9SYXcYAiABKAkSEwoLZnJvbUVwb2NoTXMYAyABKAMS",
            "EQoJdG9FcG9jaE1zGAQgASgDIjoKEkRhdGFzb3VyY2VSZXNwb25zZRIkCgdy",
            "ZXN1bHRzGAEgAygLMhMubW9kZWxzLlF1ZXJ5UmVzdWx0IpQBCgtRdWVyeVJl",
            "c3VsdBINCgVlcnJvchgBIAEoCRINCgVyZWZJZBgCIAEoCRIQCghtZXRhSnNv",
            "bhgDIAEoCRIiCgZzZXJpZXMYBCADKAsyEi5tb2RlbHMuVGltZVNlcmllcxId",
            "CgZ0YWJsZXMYBSADKAsyDS5tb2RlbHMuVGFibGUSEgoKZGF0YWZyYW1lcxgG",
            "IAMoDCJNCgVUYWJsZRIkCgdjb2x1bW5zGAEgAygLMhMubW9kZWxzLlRhYmxl",
            "Q29sdW1uEh4KBHJvd3MYAiADKAsyEC5tb2RlbHMuVGFibGVSb3ciGwoLVGFi",
            "bGVDb2x1bW4SDAoEbmFtZRgBIAEoCSIsCghUYWJsZVJvdxIgCgZ2YWx1ZXMY",
            "ASADKAsyEC5tb2RlbHMuUm93VmFsdWUi/AEKCFJvd1ZhbHVlEiMKBGtpbmQY",
            "ASABKA4yFS5tb2RlbHMuUm93VmFsdWUuS2luZBITCgtkb3VibGVWYWx1ZRgC",
            "IAEoARISCgppbnQ2NFZhbHVlGAMgASgDEhEKCWJvb2xWYWx1ZRgEIAEoCBIT",
            "CgtzdHJpbmdWYWx1ZRgFIAEoCRISCgpieXRlc1ZhbHVlGAYgASgMImYKBEtp",
            "bmQSDQoJVFlQRV9OVUxMEAASDwoLVFlQRV9ET1VCTEUQARIOCgpUWVBFX0lO",
            "VDY0EAISDQoJVFlQRV9CT09MEAMSDwoLVFlQRV9TVFJJTkcQBBIOCgpUWVBF",
            "X0JZVEVTEAUi/AEKDkRhdGFzb3VyY2VJbmZvEgoKAmlkGAEgASgDEg0KBW9y",
            "Z0lkGAIgASgDEgwKBG5hbWUYAyABKAkSDAoEdHlwZRgEIAEoCRILCgN1cmwY",
            "BSABKAkSEAoIanNvbkRhdGEYBiABKAkSVAoXZGVjcnlwdGVkU2VjdXJlSnNv",
            "bkRhdGEYByADKAsyMy5tb2RlbHMuRGF0YXNvdXJjZUluZm8uRGVjcnlwdGVk",
            "U2VjdXJlSnNvbkRhdGFFbnRyeRo+ChxEZWNyeXB0ZWRTZWN1cmVKc29uRGF0",
            "YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEikgEKClRp",
            "bWVTZXJpZXMSDAoEbmFtZRgBIAEoCRIqCgR0YWdzGAIgAygLMhwubW9kZWxz",
            "LlRpbWVTZXJpZXMuVGFnc0VudHJ5Eh0KBnBvaW50cxgDIAMoCzINLm1vZGVs",
            "cy5Qb2ludBorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4ASIpCgVQb2ludBIRCgl0aW1lc3RhbXAYASABKAMSDQoFdmFsdWUY",
            "AiABKAEyUgoQRGF0YXNvdXJjZVBsdWdpbhI+CgVRdWVyeRIZLm1vZGVscy5E",
            "YXRhc291cmNlUmVxdWVzdBoaLm1vZGVscy5EYXRhc291cmNlUmVzcG9uc2VC",
            "DFoKZGF0YXNvdXJjZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.DatasourceRequest), global::Models.DatasourceRequest.Parser, new[]{ "TimeRange", "Datasource", "Queries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.Query), global::Models.Query.Parser, new[]{ "RefId", "MaxDataPoints", "IntervalMs", "ModelJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.TimeRange), global::Models.TimeRange.Parser, new[]{ "FromRaw", "ToRaw", "FromEpochMs", "ToEpochMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.DatasourceResponse), global::Models.DatasourceResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.QueryResult), global::Models.QueryResult.Parser, new[]{ "Error", "RefId", "MetaJson", "Series", "Tables", "Dataframes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.Table), global::Models.Table.Parser, new[]{ "Columns", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.TableColumn), global::Models.TableColumn.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.TableRow), global::Models.TableRow.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.RowValue), global::Models.RowValue.Parser, new[]{ "Kind", "DoubleValue", "Int64Value", "BoolValue", "StringValue", "BytesValue" }, null, new[]{ typeof(global::Models.RowValue.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.DatasourceInfo), global::Models.DatasourceInfo.Parser, new[]{ "Id", "OrgId", "Name", "Type", "Url", "JsonData", "DecryptedSecureJsonData" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.TimeSeries), global::Models.TimeSeries.Parser, new[]{ "Name", "Tags", "Points" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Models.Point), global::Models.Point.Parser, new[]{ "Timestamp", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DatasourceRequest : pb::IMessage<DatasourceRequest> {
    private static readonly pb::MessageParser<DatasourceRequest> _parser = new pb::MessageParser<DatasourceRequest>(() => new DatasourceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceRequest(DatasourceRequest other) : this() {
      timeRange_ = other.timeRange_ != null ? other.timeRange_.Clone() : null;
      datasource_ = other.datasource_ != null ? other.datasource_.Clone() : null;
      queries_ = other.queries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceRequest Clone() {
      return new DatasourceRequest(this);
    }

    /// <summary>Field number for the "timeRange" field.</summary>
    public const int TimeRangeFieldNumber = 1;
    private global::Models.TimeRange timeRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Models.TimeRange TimeRange {
      get { return timeRange_; }
      set {
        timeRange_ = value;
      }
    }

    /// <summary>Field number for the "datasource" field.</summary>
    public const int DatasourceFieldNumber = 2;
    private global::Models.DatasourceInfo datasource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Models.DatasourceInfo Datasource {
      get { return datasource_; }
      set {
        datasource_ = value;
      }
    }

    /// <summary>Field number for the "queries" field.</summary>
    public const int QueriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Models.Query> _repeated_queries_codec
        = pb::FieldCodec.ForMessage(26, global::Models.Query.Parser);
    private readonly pbc::RepeatedField<global::Models.Query> queries_ = new pbc::RepeatedField<global::Models.Query>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.Query> Queries {
      get { return queries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimeRange, other.TimeRange)) return false;
      if (!object.Equals(Datasource, other.Datasource)) return false;
      if(!queries_.Equals(other.queries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeRange_ != null) hash ^= TimeRange.GetHashCode();
      if (datasource_ != null) hash ^= Datasource.GetHashCode();
      hash ^= queries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timeRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeRange);
      }
      if (datasource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Datasource);
      }
      queries_.WriteTo(output, _repeated_queries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeRange);
      }
      if (datasource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datasource);
      }
      size += queries_.CalculateSize(_repeated_queries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.timeRange_ != null) {
        if (timeRange_ == null) {
          TimeRange = new global::Models.TimeRange();
        }
        TimeRange.MergeFrom(other.TimeRange);
      }
      if (other.datasource_ != null) {
        if (datasource_ == null) {
          Datasource = new global::Models.DatasourceInfo();
        }
        Datasource.MergeFrom(other.Datasource);
      }
      queries_.Add(other.queries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeRange_ == null) {
              TimeRange = new global::Models.TimeRange();
            }
            input.ReadMessage(TimeRange);
            break;
          }
          case 18: {
            if (datasource_ == null) {
              Datasource = new global::Models.DatasourceInfo();
            }
            input.ReadMessage(Datasource);
            break;
          }
          case 26: {
            queries_.AddEntriesFrom(input, _repeated_queries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      refId_ = other.refId_;
      maxDataPoints_ = other.maxDataPoints_;
      intervalMs_ = other.intervalMs_;
      modelJson_ = other.modelJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "refId" field.</summary>
    public const int RefIdFieldNumber = 1;
    private string refId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefId {
      get { return refId_; }
      set {
        refId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxDataPoints" field.</summary>
    public const int MaxDataPointsFieldNumber = 2;
    private long maxDataPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxDataPoints {
      get { return maxDataPoints_; }
      set {
        maxDataPoints_ = value;
      }
    }

    /// <summary>Field number for the "intervalMs" field.</summary>
    public const int IntervalMsFieldNumber = 3;
    private long intervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntervalMs {
      get { return intervalMs_; }
      set {
        intervalMs_ = value;
      }
    }

    /// <summary>Field number for the "modelJson" field.</summary>
    public const int ModelJsonFieldNumber = 4;
    private string modelJson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelJson {
      get { return modelJson_; }
      set {
        modelJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefId != other.RefId) return false;
      if (MaxDataPoints != other.MaxDataPoints) return false;
      if (IntervalMs != other.IntervalMs) return false;
      if (ModelJson != other.ModelJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefId.Length != 0) hash ^= RefId.GetHashCode();
      if (MaxDataPoints != 0L) hash ^= MaxDataPoints.GetHashCode();
      if (IntervalMs != 0L) hash ^= IntervalMs.GetHashCode();
      if (ModelJson.Length != 0) hash ^= ModelJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RefId);
      }
      if (MaxDataPoints != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxDataPoints);
      }
      if (IntervalMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(IntervalMs);
      }
      if (ModelJson.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefId);
      }
      if (MaxDataPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxDataPoints);
      }
      if (IntervalMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntervalMs);
      }
      if (ModelJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.RefId.Length != 0) {
        RefId = other.RefId;
      }
      if (other.MaxDataPoints != 0L) {
        MaxDataPoints = other.MaxDataPoints;
      }
      if (other.IntervalMs != 0L) {
        IntervalMs = other.IntervalMs;
      }
      if (other.ModelJson.Length != 0) {
        ModelJson = other.ModelJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RefId = input.ReadString();
            break;
          }
          case 16: {
            MaxDataPoints = input.ReadInt64();
            break;
          }
          case 24: {
            IntervalMs = input.ReadInt64();
            break;
          }
          case 34: {
            ModelJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeRange : pb::IMessage<TimeRange> {
    private static readonly pb::MessageParser<TimeRange> _parser = new pb::MessageParser<TimeRange>(() => new TimeRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange(TimeRange other) : this() {
      fromRaw_ = other.fromRaw_;
      toRaw_ = other.toRaw_;
      fromEpochMs_ = other.fromEpochMs_;
      toEpochMs_ = other.toEpochMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange Clone() {
      return new TimeRange(this);
    }

    /// <summary>Field number for the "fromRaw" field.</summary>
    public const int FromRawFieldNumber = 1;
    private string fromRaw_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromRaw {
      get { return fromRaw_; }
      set {
        fromRaw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toRaw" field.</summary>
    public const int ToRawFieldNumber = 2;
    private string toRaw_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToRaw {
      get { return toRaw_; }
      set {
        toRaw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromEpochMs" field.</summary>
    public const int FromEpochMsFieldNumber = 3;
    private long fromEpochMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromEpochMs {
      get { return fromEpochMs_; }
      set {
        fromEpochMs_ = value;
      }
    }

    /// <summary>Field number for the "toEpochMs" field.</summary>
    public const int ToEpochMsFieldNumber = 4;
    private long toEpochMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToEpochMs {
      get { return toEpochMs_; }
      set {
        toEpochMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromRaw != other.FromRaw) return false;
      if (ToRaw != other.ToRaw) return false;
      if (FromEpochMs != other.FromEpochMs) return false;
      if (ToEpochMs != other.ToEpochMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromRaw.Length != 0) hash ^= FromRaw.GetHashCode();
      if (ToRaw.Length != 0) hash ^= ToRaw.GetHashCode();
      if (FromEpochMs != 0L) hash ^= FromEpochMs.GetHashCode();
      if (ToEpochMs != 0L) hash ^= ToEpochMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromRaw.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromRaw);
      }
      if (ToRaw.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToRaw);
      }
      if (FromEpochMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FromEpochMs);
      }
      if (ToEpochMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ToEpochMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromRaw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromRaw);
      }
      if (ToRaw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToRaw);
      }
      if (FromEpochMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromEpochMs);
      }
      if (ToEpochMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToEpochMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeRange other) {
      if (other == null) {
        return;
      }
      if (other.FromRaw.Length != 0) {
        FromRaw = other.FromRaw;
      }
      if (other.ToRaw.Length != 0) {
        ToRaw = other.ToRaw;
      }
      if (other.FromEpochMs != 0L) {
        FromEpochMs = other.FromEpochMs;
      }
      if (other.ToEpochMs != 0L) {
        ToEpochMs = other.ToEpochMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FromRaw = input.ReadString();
            break;
          }
          case 18: {
            ToRaw = input.ReadString();
            break;
          }
          case 24: {
            FromEpochMs = input.ReadInt64();
            break;
          }
          case 32: {
            ToEpochMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasourceResponse : pb::IMessage<DatasourceResponse> {
    private static readonly pb::MessageParser<DatasourceResponse> _parser = new pb::MessageParser<DatasourceResponse>(() => new DatasourceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasourceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceResponse(DatasourceResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceResponse Clone() {
      return new DatasourceResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Models.QueryResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Models.QueryResult.Parser);
    private readonly pbc::RepeatedField<global::Models.QueryResult> results_ = new pbc::RepeatedField<global::Models.QueryResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.QueryResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasourceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasourceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasourceResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryResult : pb::IMessage<QueryResult> {
    private static readonly pb::MessageParser<QueryResult> _parser = new pb::MessageParser<QueryResult>(() => new QueryResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult(QueryResult other) : this() {
      error_ = other.error_;
      refId_ = other.refId_;
      metaJson_ = other.metaJson_;
      series_ = other.series_.Clone();
      tables_ = other.tables_.Clone();
      dataframes_ = other.dataframes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult Clone() {
      return new QueryResult(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refId" field.</summary>
    public const int RefIdFieldNumber = 2;
    private string refId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefId {
      get { return refId_; }
      set {
        refId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metaJson" field.</summary>
    public const int MetaJsonFieldNumber = 3;
    private string metaJson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MetaJson {
      get { return metaJson_; }
      set {
        metaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "series" field.</summary>
    public const int SeriesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Models.TimeSeries> _repeated_series_codec
        = pb::FieldCodec.ForMessage(34, global::Models.TimeSeries.Parser);
    private readonly pbc::RepeatedField<global::Models.TimeSeries> series_ = new pbc::RepeatedField<global::Models.TimeSeries>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.TimeSeries> Series {
      get { return series_; }
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Models.Table> _repeated_tables_codec
        = pb::FieldCodec.ForMessage(42, global::Models.Table.Parser);
    private readonly pbc::RepeatedField<global::Models.Table> tables_ = new pbc::RepeatedField<global::Models.Table>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.Table> Tables {
      get { return tables_; }
    }

    /// <summary>Field number for the "dataframes" field.</summary>
    public const int DataframesFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_dataframes_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> dataframes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Dataframes {
      get { return dataframes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (RefId != other.RefId) return false;
      if (MetaJson != other.MetaJson) return false;
      if(!series_.Equals(other.series_)) return false;
      if(!tables_.Equals(other.tables_)) return false;
      if(!dataframes_.Equals(other.dataframes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (RefId.Length != 0) hash ^= RefId.GetHashCode();
      if (MetaJson.Length != 0) hash ^= MetaJson.GetHashCode();
      hash ^= series_.GetHashCode();
      hash ^= tables_.GetHashCode();
      hash ^= dataframes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (RefId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RefId);
      }
      if (MetaJson.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MetaJson);
      }
      series_.WriteTo(output, _repeated_series_codec);
      tables_.WriteTo(output, _repeated_tables_codec);
      dataframes_.WriteTo(output, _repeated_dataframes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (RefId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefId);
      }
      if (MetaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaJson);
      }
      size += series_.CalculateSize(_repeated_series_codec);
      size += tables_.CalculateSize(_repeated_tables_codec);
      size += dataframes_.CalculateSize(_repeated_dataframes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryResult other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.RefId.Length != 0) {
        RefId = other.RefId;
      }
      if (other.MetaJson.Length != 0) {
        MetaJson = other.MetaJson;
      }
      series_.Add(other.series_);
      tables_.Add(other.tables_);
      dataframes_.Add(other.dataframes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18: {
            RefId = input.ReadString();
            break;
          }
          case 26: {
            MetaJson = input.ReadString();
            break;
          }
          case 34: {
            series_.AddEntriesFrom(input, _repeated_series_codec);
            break;
          }
          case 42: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
          case 50: {
            dataframes_.AddEntriesFrom(input, _repeated_dataframes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      columns_ = other.columns_.Clone();
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Models.TableColumn> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::Models.TableColumn.Parser);
    private readonly pbc::RepeatedField<global::Models.TableColumn> columns_ = new pbc::RepeatedField<global::Models.TableColumn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.TableColumn> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Models.TableRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Models.TableRow.Parser);
    private readonly pbc::RepeatedField<global::Models.TableRow> rows_ = new pbc::RepeatedField<global::Models.TableRow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.TableRow> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableColumn : pb::IMessage<TableColumn> {
    private static readonly pb::MessageParser<TableColumn> _parser = new pb::MessageParser<TableColumn>(() => new TableColumn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableColumn(TableColumn other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableColumn Clone() {
      return new TableColumn(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableColumn other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableRow : pb::IMessage<TableRow> {
    private static readonly pb::MessageParser<TableRow> _parser = new pb::MessageParser<TableRow>(() => new TableRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRow(TableRow other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRow Clone() {
      return new TableRow(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Models.RowValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Models.RowValue.Parser);
    private readonly pbc::RepeatedField<global::Models.RowValue> values_ = new pbc::RepeatedField<global::Models.RowValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.RowValue> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableRow other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RowValue : pb::IMessage<RowValue> {
    private static readonly pb::MessageParser<RowValue> _parser = new pb::MessageParser<RowValue>(() => new RowValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowValue(RowValue other) : this() {
      kind_ = other.kind_;
      doubleValue_ = other.doubleValue_;
      int64Value_ = other.int64Value_;
      boolValue_ = other.boolValue_;
      stringValue_ = other.stringValue_;
      bytesValue_ = other.bytesValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowValue Clone() {
      return new RowValue(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Models.RowValue.Types.Kind kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Models.RowValue.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "doubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 2;
    private double doubleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    /// <summary>Field number for the "int64Value" field.</summary>
    public const int Int64ValueFieldNumber = 3;
    private long int64Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return int64Value_; }
      set {
        int64Value_ = value;
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 4;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 5;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytesValue" field.</summary>
    public const int BytesValueFieldNumber = 6;
    private pb::ByteString bytesValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return bytesValue_; }
      set {
        bytesValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (Int64Value != other.Int64Value) return false;
      if (BoolValue != other.BoolValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BytesValue != other.BytesValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (DoubleValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (Int64Value != 0L) hash ^= Int64Value.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (BytesValue.Length != 0) hash ^= BytesValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleValue);
      }
      if (Int64Value != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Int64Value);
      }
      if (BoolValue != false) {
        output.WriteRawTag(32);
        output.WriteBool(BoolValue);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StringValue);
      }
      if (BytesValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BytesValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      if (Int64Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (BytesValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowValue other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
      if (other.Int64Value != 0L) {
        Int64Value = other.Int64Value;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.BytesValue.Length != 0) {
        BytesValue = other.BytesValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Models.RowValue.Types.Kind) input.ReadEnum();
            break;
          }
          case 17: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 24: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 32: {
            BoolValue = input.ReadBool();
            break;
          }
          case 42: {
            StringValue = input.ReadString();
            break;
          }
          case 50: {
            BytesValue = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RowValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        /// <summary>
        /// Field type null.
        /// </summary>
        [pbr::OriginalName("TYPE_NULL")] TypeNull = 0,
        /// <summary>
        /// Field type double.
        /// </summary>
        [pbr::OriginalName("TYPE_DOUBLE")] TypeDouble = 1,
        /// <summary>
        /// Field type int64.
        /// </summary>
        [pbr::OriginalName("TYPE_INT64")] TypeInt64 = 2,
        /// <summary>
        /// Field type bool.
        /// </summary>
        [pbr::OriginalName("TYPE_BOOL")] TypeBool = 3,
        /// <summary>
        /// Field type string.
        /// </summary>
        [pbr::OriginalName("TYPE_STRING")] TypeString = 4,
        /// <summary>
        /// Field type bytes.
        /// </summary>
        [pbr::OriginalName("TYPE_BYTES")] TypeBytes = 5,
      }

    }
    #endregion

  }

  public sealed partial class DatasourceInfo : pb::IMessage<DatasourceInfo> {
    private static readonly pb::MessageParser<DatasourceInfo> _parser = new pb::MessageParser<DatasourceInfo>(() => new DatasourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceInfo(DatasourceInfo other) : this() {
      id_ = other.id_;
      orgId_ = other.orgId_;
      name_ = other.name_;
      type_ = other.type_;
      url_ = other.url_;
      jsonData_ = other.jsonData_;
      decryptedSecureJsonData_ = other.decryptedSecureJsonData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasourceInfo Clone() {
      return new DatasourceInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "orgId" field.</summary>
    public const int OrgIdFieldNumber = 2;
    private long orgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrgId {
      get { return orgId_; }
      set {
        orgId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 5;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonData" field.</summary>
    public const int JsonDataFieldNumber = 6;
    private string jsonData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonData {
      get { return jsonData_; }
      set {
        jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decryptedSecureJsonData" field.</summary>
    public const int DecryptedSecureJsonDataFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_decryptedSecureJsonData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> decryptedSecureJsonData_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> DecryptedSecureJsonData {
      get { return decryptedSecureJsonData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OrgId != other.OrgId) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Url != other.Url) return false;
      if (JsonData != other.JsonData) return false;
      if (!DecryptedSecureJsonData.Equals(other.DecryptedSecureJsonData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OrgId != 0L) hash ^= OrgId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
      hash ^= DecryptedSecureJsonData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OrgId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OrgId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      if (JsonData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JsonData);
      }
      decryptedSecureJsonData_.WriteTo(output, _map_decryptedSecureJsonData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OrgId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrgId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (JsonData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
      }
      size += decryptedSecureJsonData_.CalculateSize(_map_decryptedSecureJsonData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasourceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OrgId != 0L) {
        OrgId = other.OrgId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.JsonData.Length != 0) {
        JsonData = other.JsonData;
      }
      decryptedSecureJsonData_.Add(other.decryptedSecureJsonData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            OrgId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
          case 50: {
            JsonData = input.ReadString();
            break;
          }
          case 58: {
            decryptedSecureJsonData_.AddEntriesFrom(input, _map_decryptedSecureJsonData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeSeries : pb::IMessage<TimeSeries> {
    private static readonly pb::MessageParser<TimeSeries> _parser = new pb::MessageParser<TimeSeries>(() => new TimeSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries(TimeSeries other) : this() {
      name_ = other.name_;
      tags_ = other.tags_.Clone();
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries Clone() {
      return new TimeSeries(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Models.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(26, global::Models.Point.Parser);
    private readonly pbc::RepeatedField<global::Models.Point> points_ = new pbc::RepeatedField<global::Models.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Models.Point> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Tags.GetHashCode();
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      tags_.WriteTo(output, _map_tags_codec);
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSeries other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      tags_.Add(other.tags_);
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 26: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Models.DatasourceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      timestamp_ = other.timestamp_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
